{"version":3,"sources":["../node_modules/peerjs/dist sync","components/Start/Header.jsx","components/Start/HomePage.jsx","components/Main/imgs/TriviaGameWait.jpg","components/Main/TriviaGame/GameLoading.jsx","components/Main/imgs/cute-pup.jpg","components/Main/TriviaGame/Question.jsx","components/Main/TriviaGame/Answer.jsx","components/Main/imgs/rightMeme.jpeg","components/Main/imgs/wrongMeme.jpeg","components/Main/TriviaGame.jsx","components/Main/TriviaMultiplayer/MultiCommunication.jsx","components/Main/TriviaMultiplayer.jsx","components/Main/Main.jsx","components/Result/Result.jsx","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","TriviaTitle","styled","h1","Header","HomeContainer","div","InformationContainer","UserQuestion","text","UserInput","input","JoinBtn","button","searchNameParam","searchRoomParam","HomePage","useState","name","setName","room","setRoom","navigate","useNavigate","type","onChange","target","value","placeHolder","onClick","length","alert","isNaN","pathname","mainUrl","search","createSearchParams","toString","LoadingContainer","img","LoadingText","GameLoading","src","puppyWaitEye","QuestionContainer","TriviaQuestion","TriviaTimeLeft","TriviaTimeLeftPressure","PupHolder","Question","props","currNumber","qNum","currQuestion","qType","he","decode","qQues","timeLeft","setTimeLeft","useEffect","qRunTimer","current","countDown","setTimeout","clearTimeout","qResults","happyPuppy","ChoiceContainer","Choice","ChoiceOne","ChoiceTwo","ChoiceThree","ChoiceFour","Answer","triviaOptions","qCorrect","qIncorrect","map","curr","order","Math","random","sort","p","q","checkAnswer","qResult","TriviaGameContainer","TriviaGame","loading","userDifficulty","setUserDifficulty","triviaRound","setTriviaRound","triviaQueue","setTriviaQueue","questionNum","setQuestionNum","userPoints","setUserPoints","setMemeTime","runTimer","useRef","getTriviaQuestion","a","fetch","openTrivia_api_call","json","openTrivia_api_data","results","then","res","console","log","handlePoints","sendUserTheirGift","finishCurrentRound","rightAnswer","alt","wrongAnswer","socket","socketIOClient","secure","ChatRootContainer","ChatHistoryContainer","IndividualChat","IndividualChatFirstName","span","IndividualChatMsg","InsertChatContainer","InsertChatInput","InsertChatBtn","VideoRootContainer","VideoHolder1","video","MultiCommunication","uuidv4","userId","userName","setUserName","setUserRoom","userMsg","chatHistory","setChatHistory","updateChatHistory","incomingMsg","chatHistoryCopy","push","playerLocation","useLocation","playerInput","qs","parse","slice","emit","userRoom","Date","getHours","getMinutes","on","newPlayerData","peer","Peer","remoteStream","setRemoteStream","otherPeerId","navigator","mediaDevices","getUserMedia","audio","stream","call","otherStream","appendNewStream","catch","error","someoneCalling","answer","newStream","remoteStreamCopy","ind","postedChat","document","getElementById","incomingChat","getMilliseconds","incomingUpdate","TriviaMultiplayerContainer","TriviaMultiplayer","MainContainer","Main","Result","homeUrl","App","className","path","element","to","style","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1171f332.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 74;","import React from 'react';\nimport styled from 'styled-components';\n\n// styled components\nconst TriviaTitle = styled.h1`\n    display: flex;\n    justify-content: center;\n    font-size: 6em;\n    font-family: 'Rancho', cursive;\n    text-align: center;\n    color: #E55B13;\n    margin: 6% 0 0 0;\n  `\n\n// Header as (Flash Trivia) -> ? icon??\nconst Header = () => {\n  return(\n    <div>\n      <TriviaTitle>Flash Trivia</TriviaTitle>\n    </div>\n  )\n}\nexport default Header;","import React, {useState}from 'react';\nimport styled from 'styled-components';\nimport Header from './Header';\nimport {mainUrl} from \"../../App\";\nimport {createSearchParams, useNavigate} from \"react-router-dom\";\n\n// styled components\nconst HomeContainer = styled.div`\n  margin-top: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 60vh;\n  font-family: Arial,serif;\n`\nconst InformationContainer = styled.div`\n  width: 25vw;\n  height: 10vh;\n  margin: 0 0 2vh 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst UserQuestion = styled.text`\n  font-weight: bold;\n  width: 10vw;\n  padding: 5%;\n  margin-right: 8%;\n  font-size: 1.5em;\n`\nconst UserInput = styled.input`\n  text-align: left;\n  font-size: 1.5em;\n  width: 14vw;\n  height: 4.5vh;\n  border: none;\n  background: transparent;\n  outline: pink;\n  border-bottom: 2px solid black;\n`\nconst JoinBtn = styled.button`\n  width: 80px;\n  height: 40px;\n  align-self: center;\n  margin-left: 20vw;\n  background: white;\n  border-radius: .25em;\n  box-shadow: 0 9px #999;\n  border: none;\n  font-weight: bold;\n  font-size: 18px;\n  cursor: pointer;\n  :hover {\n    background: mediumslateblue;\n  }\n  :active {\n    background: green;\n    box-shadow: 0 0 #666 !important;\n    transform: translateY(9px);\n  }\n`\n\nexport const searchNameParam = 'name';\nexport const searchRoomParam = 'room';\n\nconst HomePage = () => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n\n  const navigate = useNavigate();\n\n  // Navigate to the main trivia game page to start the game\n  const startTriviaSession = () => {\n    if (name.length === 0) {\n      alert(\"Oops, please reenter your name.\");\n    } else if (isNaN(room) || room < 0) {\n      alert(\"Oops, please reenter room number.\");\n    } else {\n      navigate({\n        pathname: mainUrl,\n        search: createSearchParams([\n          [searchNameParam, name],\n          [searchRoomParam, room]\n        ]).toString()\n      });\n    }\n  };\n\n  return(\n    <div>\n      <Header />\n      <HomeContainer>\n        <InformationContainer>\n          <UserQuestion>Name:</UserQuestion>\n          <UserInput type={\"text\"} onChange={e => setName(e.target.value)} placeHolder={\"Hello\"}/>\n        </InformationContainer>\n        <InformationContainer>\n          <UserQuestion>Room#:</UserQuestion>\n          <UserInput type={\"text\"} onChange={e => setRoom(e.target.value)}/>\n        </InformationContainer>\n        <JoinBtn onClick={startTriviaSession}>Start</JoinBtn>\n      </HomeContainer>\n    </div>\n  );\n};\n\nexport default HomePage;","export default __webpack_public_path__ + \"static/media/TriviaGameWait.cd3c1746.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport puppyWaitEye from '../imgs/TriviaGameWait.jpg'\n\n// Style component\nconst LoadingContainer = styled.img`\n  width: 100%;\n  height: 100%;\n`\nconst LoadingText = styled.h1`\n  color: black;\n  font-size: 2em;\n`\n\n// Loading page when the page is waiting to fetch the data from OpenTrivia, a puppy with text wait patiently...\nconst GameLoading = () => {\n  return(\n    <div>\n      <LoadingContainer src={puppyWaitEye}/>\n      <LoadingText>Beep Bop Bop, fetching questions, please wait patiently...</LoadingText>\n    </div>\n  )\n}\nexport default GameLoading;","export default __webpack_public_path__ + \"static/media/cute-pup.723aade0.jpg\";","import React, {useEffect, useRef, useState} from 'react';\nimport styled from 'styled-components';\nimport happyPuppy from '../imgs/cute-pup.jpg';\nimport he from 'he';\n\n// style components\nconst QuestionContainer = styled.div`\n  display: flex;\n`\nexport const TriviaQuestion = styled.h1`\n  display: flex;\n  font-size: 1.25em;\n  color: black;\n  background-color: whitesmoke;\n  width: 39.5vw;\n  height: 10vh;\n  margin: 1.5% 0 .5% 15%;\n  padding: 2% 2.5%;\n  border-radius: 1em;\n  align-items: center;\n`\nconst TriviaTimeLeft = styled.h1`\n  font-family: 'Orbitron', sans-serif;\n  width: 20%;\n  margin: auto auto auto auto;\n  font-size: 3.75em;\n`\nconst TriviaTimeLeftPressure = styled(TriviaTimeLeft)`\n  color: red;\n`\nexport const PupHolder = styled.img`\n  width: 30%;\n  height: 40%;\n`;\n\n// Current question displayed\n// props:: qNum, qType, qQues, qResults\nconst Question = (props) => {\n  const currNumber = props.qNum + 1;\n  const currType = props.qType;\n  const currQuestion = he.decode(props.qQues);\n  const [timeLeft, setTimeLeft] = useState(60);\n\n  // Side effect of counting down the timer unless it is picked, send a wrong answer result when user did not pick any\n  useEffect(() => {\n    if (props.qRunTimer.current !== props.qNum) {\n      setTimeLeft(60);\n      props.qRunTimer.current++;\n    }\n    const countDown = setTimeout(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n    if (timeLeft === 0) {\n      clearTimeout(countDown);\n      setTimeLeft(60);\n      props.qResults(0);\n    } else {\n      return () => clearTimeout(countDown);\n    }\n  }, [timeLeft]);\n\n  // Render the question as well as the timer to the right of it\n  return(\n    <div>\n        <QuestionContainer>\n          <TriviaQuestion>{currNumber}) {currQuestion}</TriviaQuestion> {/*TODO possible coloring of the qType category*/}\n          {timeLeft > 10 ?\n            (<TriviaTimeLeft>{timeLeft}</TriviaTimeLeft>) : (<TriviaTimeLeftPressure>{timeLeft}</TriviaTimeLeftPressure>)\n          }\n        </QuestionContainer>\n      <PupHolder src={happyPuppy}/>\n      {/*TODO Possible Images generated from ai base on qQues keywords OpenAI??? */}\n    </div>\n  )\n}\nexport default Question;","import React from 'react';\nimport styled from 'styled-components';\nimport he from 'he';\n\n// Style Components\nconst ChoiceContainer = styled.div`\n  justify-content: center;\n`\nconst Choice = styled.button`\n  font-size: 1.25em;\n  font-weight: bold;\n  color: white;\n  width: 22vw;\n  height: 15vh;\n  padding: 2%;\n  border-radius: 1rem;\n  margin: .4% 1.5%;\n`\nconst ChoiceOne = styled(Choice)`\n  background-color: blue;\n`\nconst ChoiceTwo = styled(Choice)`\n  background-color: purple;\n`\nconst ChoiceThree = styled(Choice)`\n  background-color: green;\n`\nconst ChoiceFour = styled(Choice)`\n  background-color: red;\n`\n\n// Current choice for the question displayed\n// props:: qCorrect, qIncorrect\nconst Answer = (props) => {\n\n  // Randomly order the answer\n  const triviaOptions = [props.qCorrect, ...props.qIncorrect]\n    .map(curr => {\n      return {curr, order: Math.random()}\n    })\n    .sort((p, q) => {\n      return p.order - q.order;\n    })\n    .map(({curr}) => curr);\n\n  // Check to see if the answer is correct and send the result back to TriviaGame component to handle points\n  const checkAnswer = (e) => {\n    const rightAnswer = e.target.value === props.qCorrect;\n    if (rightAnswer) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  // Render the four different answer choices\n  return(\n    <ChoiceContainer>\n      <ChoiceOne value={triviaOptions[0]} onClick={(e) => props.qResult(checkAnswer(e))}>{he.decode(triviaOptions[0])}</ChoiceOne>\n      <ChoiceTwo value={triviaOptions[1]} onClick={(e) => props.qResult(checkAnswer(e))}>{he.decode(triviaOptions[1])}</ChoiceTwo>\n      <ChoiceThree value={triviaOptions[2]} onClick={(e) => props.qResult(checkAnswer(e))}>{he.decode(triviaOptions[2])}</ChoiceThree>\n      <ChoiceFour value={triviaOptions[3]} onClick={(e) => props.qResult(checkAnswer(e))}>{he.decode(triviaOptions[3])}</ChoiceFour>\n    </ChoiceContainer>\n  )\n}\n\nexport default Answer;","export default __webpack_public_path__ + \"static/media/rightMeme.ddb80d8a.jpeg\";","export default __webpack_public_path__ + \"static/media/wrongMeme.70d484ee.jpeg\";","import React, {useState, useEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport GameLoading from \"./TriviaGame/GameLoading.jsx\";\nimport Question from './TriviaGame/Question.jsx';\nimport Answer from './TriviaGame/Answer.jsx';\nimport rightAnswer from './imgs/rightMeme.jpeg';\nimport wrongAnswer from './imgs/wrongMeme.jpeg';\n\n// Properties of each question from OpenTrivia API\nconst tResponse = 'response_code';  // Response of API request\nconst tType = 'type';\nconst tQuestion = 'question';\nconst tCorrect = 'correct_answer';\nconst tIncorrect = 'incorrect_answers';\n\n// Styled Components\nexport const TriviaGameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 60%;\n  height: 99%;\n  padding: 0 0 5% 0;\n`\n\n// Question Queue to track the question when the user starts playing the game.\nconst TriviaGame = (props) => {\n  // States of the TriviaGame Function\n  const [loading, setLoading] = useState(true);\n  const [userDifficulty, setUserDifficulty] = useState(props.userDifficulty);\n  const [triviaRound, setTriviaRound] = useState(0);\n  const [triviaQueue, setTriviaQueue] = useState([]);\n  const [questionNum, setQuestionNum] = useState(0);\n  const [userPoints, setUserPoints] = useState(0);\n  const [memeTime, setMemeTime] = useState({\"display\": false});\n  const runTimer = useRef(0);\n\n  // Async function to return an array of 50 trivia question from OpenTrivia API, a new batch of question every call\n  const getTriviaQuestion = async() => {\n    const openTrivia_api_call = await fetch(`https://opentdb.com/api.php?amount=50&difficulty=${userDifficulty}&type=multiple`)\n    const openTrivia_api_data = await openTrivia_api_call.json();\n    if (openTrivia_api_data[tResponse] !== 0) { // When the api_call failed to send any question send an error\n      alert(\"Oops 401 Error occurred, please try again later.\");\n    }\n    await setTriviaQueue(openTrivia_api_data.results);\n\n    // Load up the rendering of the question after triviaQueues finish up fetching the question\n    setTimeout(() => {\n      //setLoading(false);\n    }, 1); // Allow the user to look at the puppy pic a bit longer :)\n  }\n\n  // New round of trivia game, only started on the first round or every new round\n  useEffect(() => {\n    setUserDifficulty(props.userDifficulty);\n    getTriviaQuestion().then((res) => console.log(\"Bleep Beep Bop, Questions processed\"));\n    setQuestionNum(0);\n    setUserPoints(0);\n    runTimer.current = 0;\n    // eslint-disable-next-line\n  }, [triviaRound]);\n\n  // Add up points for the user, and move on to the next question, go to results when finished\n  const handlePoints = (e) => {\n    if (e === 1) {\n      console.log(\"right answer\");\n      setUserPoints(userPoints + 2);\n      setMemeTime({\"display\": true, \"type\": 1, \"unknownMeme\": sendUserTheirGift(1)})\n    } else {\n      console.log(\"wrong answer\");\n      setMemeTime({\"display\": true, \"type\": 0,  \"unknownMeme\": sendUserTheirGift(0)})\n    }\n    // Consider whether to move on to the next question or that finish up the game when it reaches the maximum\n    if (questionNum < 49) {\n      setQuestionNum(questionNum + 1);\n    } else {\n      finishCurrentRound();\n    }\n  }\n\n  // Send the user a meme of the result of what they picked (right/wrong), option to move on or a timer??\n  const sendUserTheirGift = async(e) => {\n    if (e === 1) {\n      return <img src={rightAnswer} alt={\"right-answer\"} />;\n    } else {\n      return <img src={wrongAnswer} alt={\"wrong-answer\"} />\n    }\n  }\n\n  // Finish the current round and move on to the result page\n  // where the user can either laugh about the good game 🙂\n  // or cry on their stupidity😞\n  const finishCurrentRound = () => {\n    console.log(\"All question answered\");\n    setTriviaRound(triviaRound + 1);\n    /** TODO Go to result page, leaving the main page*/\n  }\n\n  // Render Trivia Game (Left Section of Main)\n  return(\n    <TriviaGameContainer>\n      {!loading ? (\n        <div>\n          <Question qNum={questionNum}\n                    qType={triviaQueue[questionNum][tType]}\n                    qQues={triviaQueue[questionNum][tQuestion]}\n                    qResults={(e) => handlePoints(e)}\n                    qRunTimer={runTimer}\n          />\n          <Answer qCorrect={triviaQueue[questionNum][tCorrect]}\n                  qIncorrect={triviaQueue[questionNum][tIncorrect]}\n                  qResult={(e) => handlePoints(e)}\n          />\n        </div>\n      ) : (\n        <GameLoading />\n      )}\n    </TriviaGameContainer>\n  )\n}\nexport default TriviaGame;","import React, {useState, useEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport { useLocation } from \"react-router-dom\";\nimport qs from 'qs';\nimport { searchNameParam, searchRoomParam } from \"../../Start/HomePage.jsx\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Peer from 'peerjs';\nimport socketIOClient from 'socket.io-client';\n\nconst socket = socketIOClient(`http://localhost:3001`, {secure: false});\n\n// ----styled components----\n/** CHAT */\nconst ChatRootContainer = styled.div` // Root of the Chat rendering where clients send msg to communicate with others\n  background-color: black;\n  color: black;\n  font-size: 1em;\n  font-family: Arial,serif;\n  display: flex;\n  flex-direction: column;\n  border-radius: .25em;\n  margin-top: .25vh;\n`\nconst ChatHistoryContainer = styled.div` // History of past chat\n  width: 40.33vw;\n  height: 28.5vh;\n  margin-right: auto;\n  padding: 3px 0 0 3px;\n  overflow-x: hidden;\n  overflow-y: auto;\n`\n// Individual Message from each player\nconst IndividualChat = styled.p` // Individual chat style components\n  display: flex;\n  width: 40.33vw;\n  margin: .75vh 0 5px .5vw;\n  color: white;\n`\nconst IndividualChatFirstName = styled.span`\n  font-weight: bold;\n  display: flex;\n  width: 2.5vw;\n  margin-right: 1.5vw;\n  text-align: left;\n`\nconst IndividualChatMsg = styled.span`\n  text-align: left;\n  margin-right: 2vw;\n  word-spacing: 0.75px;\n`\n// Box to insert new message to the group\nconst InsertChatContainer = styled.div` // Container where user can send a message and post it inside ChatHistory\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst InsertChatInput = styled.input` // Text-input to type up chat\n  background-color: white;\n  width: 38.25vw;\n  height: 4vh;\n  font-size: 1.5em;\n  margin: 0;\n`\nconst InsertChatBtn = styled.button` // Send a event to add chat to ChatHistoryContainer\n  cursor: pointer;\n  width: 2vw;\n  height: 4.35vh;\n  background-color: deepskyblue;\n  border: none;\n  margin: 0;\n  :hover {\n    font-weight: bold;\n  }\n  :active {\n    background-color: limegreen;\n  }\n`\n\n/** VIDEO */\nconst VideoRootContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  padding: 0;\n`\nconst VideoHolder1 = styled.video`\n  width: 20vw;\n  height: 25vh;\n  display: flex;\n  margin: .25vh;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n`\n\n// MultiCommunication part of the Main where player can communicate with four other player via video/chat\nconst MultiCommunication = () => {\n  // unique uuid for each player, use for keeping track of users in socket for chat and peer identification for video\n  const [userId, setUserId] = useState(`${uuidv4()}`);\n\n  // const representing value of the three properties that will be emitted to the socket server\n  const [userName, setUserName] = useState('');\n  const [userRoom, setUserRoom] = useState('');\n  const userMsg = useRef('');\n\n  // chatHistory: container for chat history among 5 players\n  // each index stores an object with just userName + userMsg prop\n  const [chatHistory, setChatHistory] = useState([]);\n\n  // Update the chatHistory by setting the new state as the copy of the history with incomingMsg appended to it\n  const updateChatHistory = (incomingMsg) => {\n    const chatHistoryCopy = chatHistory;\n    chatHistoryCopy.push(incomingMsg);\n    setChatHistory([...chatHistoryCopy]);\n  }\n\n  // () Obtain the player information from the url such as: http://localhost:3000/game/?name=steve&room=1234\n  // Effect() After a player joined, get their information and inform other players in the chat room\n  const playerLocation = useLocation();\n  useEffect(() => {\n    const playerInput = qs.parse(playerLocation.search.slice(1)); // playerLocation.search: ?name=steve&room=1234\n    setUserName(playerInput[searchNameParam]);\n    setUserRoom(playerInput[searchRoomParam]);\n\n    // emit an 'join-game' event that will place the player in their room with their team\n    socket.emit(\"join-game\", {\n      userId: userId,\n      userName: playerInput[searchNameParam],\n      userRoom: playerInput[searchRoomParam],\n      userMsg: `I have joined the game at \n        ${new Date().getHours()}:${new Date().getMinutes() < 10 ?\n        '0' + new Date().getMinutes()\n        : new Date().getMinutes()}\n        `\n    });\n\n    // Listen for 'new-player' event signifying a new player joining their game and send an update to chatHistory\n    socket.on(\"new-player\", (newPlayerData) => {\n      updateChatHistory(newPlayerData);\n    });\n  }, [playerLocation]);\n\n  // () post the new chat into the chatHistory and emitting to all players within the room\n  const postNewChat = () => {\n    const postedChat = {\n      userId: userId,\n      userName: userName,\n      userMsg: \"(◔_◔)\"\n    };\n    if (userMsg.current.length !== 0) {\n      postedChat['userMsg'] = userMsg.current;\n    }\n    socket.emit(\"chat-message\", postedChat);\n    document.getElementById(\"chatInput\").value = '';\n\n    // Listen for any incoming messages from other players\n    socket.on(\"chat-message\", (incomingChat) => {\n      console.log(`I have received an chat event from the server at ${new Date().getMilliseconds()}-->${incomingChat.userMsg}`);\n      //const newIndividualChat = { userName: incomingChat['userName'], userMsg: incomingChat['userMsg'] }\n      updateChatHistory(incomingChat);\n    });\n\n    // Listen for any player leaving the game and then updating the rest of the players in the game room\n    socket.on(\"lost-player\", (incomingUpdate) => {\n      console.log(incomingUpdate);\n      updateChatHistory(incomingUpdate);\n    });\n  }\n\n  // VIDEO PART ---->\n  let peer = new Peer(userId);\n  //const [localStream, setLocalStream] = useState('');\n  const [remoteStream, setRemoteStream] = useState([]);\n  //const dummyVidRef = useRef(null);\n  useEffect(() => {\n    // Send peer id to other players in the room to establish connection with them\n    socket.emit('meet-up');\n\n    // Listen for new peer connection and attempt to make video call with them\n    socket.on('meet-up', otherPeerId => {\n      if (otherPeerId !== peer.id) {\n        console.log(otherPeerId);\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\n          .then(stream => {\n            let vidCall = peer.call(otherPeerId, stream);\n            vidCall.on('stream', otherStream => { // Append the new player stream onto remoteStreams\n              appendNewStream(otherStream);\n            })\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      }\n    });\n\n    // Accept any incoming peer calls\n    peer.on('call', someoneCalling => {     // NEVER GETTING ANY CALLS?????\n      console.log(\"SomeoneCalling\");\n      navigator.mediaDevices.getUserMedia({video: true, audio: true})\n        .then(stream => {\n          someoneCalling.answer(stream);\n          someoneCalling.on('stream', stream => {\n            appendNewStream(stream);\n          })\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    });\n  }, []);\n\n  // Append other player streams to the videoStreams\n  const appendNewStream = (newStream) => {\n    const remoteStreamCopy = remoteStream;\n    remoteStreamCopy.push(newStream);\n    setRemoteStream(remoteStreamCopy);\n  }\n\n  // 少了几个。放一些音乐-》 浪子闲话： 花瞳\n  const displayUnavailablePlayer = () => {\n    let needed = 4 - remoteStream.length;\n    if (needed !== 0) {\n      return <VideoHolder1 src={\"https://www.youtube.com/embed/1VdoMsLY4Z4\"} />\n    }\n  }\n\n  console.log(remoteStream.length);\n  // Render the lower right chat function on main page\n  return(\n    <div>\n      <VideoRootContainer>\n        {remoteStream.map((curr, ind) => {\n          return <VideoHolder1 src={curr} key={ind} />\n        })}\n      </VideoRootContainer>\n      <ChatRootContainer>\n        <ChatHistoryContainer>\n          {chatHistory.map((curr, ind) => {\n            return <IndividualChat key={ind}>\n              <IndividualChatFirstName>{curr['userName']}:</IndividualChatFirstName>\n              <IndividualChatMsg>{curr['userMsg']}</IndividualChatMsg>\n            </IndividualChat>\n          })}\n        </ChatHistoryContainer>\n        <InsertChatContainer>\n          <InsertChatInput id={\"chatInput\"} type={\"text\"} onChange={(e) => userMsg.current = e.target.value} />\n          <InsertChatBtn onClick={postNewChat}>post</InsertChatBtn>\n        </InsertChatContainer>\n      </ChatRootContainer>\n    </div>\n  )\n}\n\nexport default MultiCommunication;","import React from 'react';\nimport styled from 'styled-components'\nimport {TriviaGameContainer} from \"./TriviaGame\";\nimport MultiCommunication from \"./TriviaMultiplayer/MultiCommunication.jsx\";\n\n// style components\nconst TriviaMultiplayerContainer = styled(TriviaGameContainer)`\n  // TriviaGameContainer of 60% on the left side, TriviaMultiplayerContainer will be on the right at 40%\n  width: 45%;\n`\n\n// Right-hand side of GamePage where the user can talk with 4 other player, or chat to answer the question\nconst TriviaMultiplayer = () => {\n  return(\n    <TriviaMultiplayerContainer>\n      <MultiCommunication />\n    </TriviaMultiplayerContainer>\n  )\n}\nexport default TriviaMultiplayer;","import React from 'react';\nimport styled from 'styled-components';\n\nimport TriviaGame from \"./TriviaGame\";\nimport TriviaMultiplayer from \"./TriviaMultiplayer\";\n\n// Style Component\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 10vh;\n`\n\nconst Main = (props) => {\n  return(\n    <div>\n      <MainContainer>\n        <TriviaGame userDifficulty={props.userDifficulty}/>\n        <TriviaMultiplayer />\n      </MainContainer>\n    </div>\n  )\n}\n\nexport default Main;","import React from 'react';\n\nconst Result = () => {\n  return(\n    <div>\n      Ending ==> How'd u do?\n    </div>\n  )\n}\n\nexport default Result;","import './App.css';\nimport {BrowserRouter, Routes, Route, Navigate} from \"react-router-dom\";\n\nimport HomePage from \"./components/Start/HomePage\";\nimport Main from './components/Main/Main';\nimport Result from './components/Result/Result';\n\n// Urls routes\nexport const homeUrl = \"/home\";\nexport const mainUrl = \"/main\";\nexport const resultUrl = \"/result\";\n\nfunction App() {    /*TODO Resize the elements so that the view on the phone would have the video ono the bottom */\n  /*\n  http://localhost:3000\n  */\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n          <Routes>\n            <Route path={'/'} element={<Navigate to={homeUrl} />} />\n            <Route path={homeUrl} element={<HomePage />} />\n            <Route path={mainUrl} element={<Main userDifficulty={\"hard\"}/>} />\n            <Route path={resultUrl} element={<Result />} />\n            <Route path={\"*\"} element={\n              <main style={{padding: \"1rem\"}}>\n                <h1>🍬👽  ⓗ𝐄𝕃𝐥𝐎  🐳✋</h1>\n                <h1>There is nothing in this page</h1>\n              </main>\n            } />\n          </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}